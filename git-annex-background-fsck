#!/usr/bin/env python
import os
import stat
import sys
import time
import subprocess

def ts():
    return int(time.time())

def is_annex_root(path):
    return os.path.exists(os.path.join(path, ".git", "annex"))

def find_annex_root(root):
    path = root
    while path != "/":
        if is_annex_root(path):
            return path
        path = os.path.normpath(os.path.join(path, ".."))
    raise Exception("Could not find annex root for %s" % root)

def tree(path):
    if os.path.isfile(path):
        yield path
        return
    for root, dirs, files in os.walk(path):
        for f in files:
            fn = os.path.join(root, f)
            yield fn

def filtered_tree(path):
    for fn in tree(path):
        if '.git/' not in fn:
            yield fn

def get_all_files(path):
    annex_root = find_annex_root(path)
    for fn in filtered_tree(path):
        short = os.path.relpath(fn, annex_root)
        keypath = os.path.realpath(fn)
        parent = os.path.dirname(keypath)
        if 'annex/objects' not in keypath:
            continue
        if not os.path.exists(fn):
            continue
        f = dict(full=fn, short=short, key=keypath, parent=parent)
        yield f

def fsck(entry):
    status = subprocess.call(["git", "annex", "fsck", entry['short']])
    return status == 0

def record_fsck(entry):
    parent = entry['parent']
    os.chmod(parent, os.stat(parent).st_mode | stat.S_ISVTX)
    t = ts()
    os.utime(parent, (t,t))

def is_sticky(entry):
    return os.stat(entry['parent']).st_mode & stat.S_ISVTX

def get_fsck_time(entry):
    try :
        if is_sticky(entry):
            return os.path.getmtime(entry['parent'])
    except OSError:
        pass

    return 0

def get_or_set_last_fsck_start(path, restart=False):
    annex_root = find_annex_root(path)
    fsck_start_file = os.path.join(annex_root, ".git", "annex", "fsck_start")
    if not restart and os.path.exists(fsck_start_file):
        with open(fsck_start_file) as f:
            start = int(f.read().strip())
    else:
        start = ts()
        with open(fsck_start_file,'w') as f:
            f.write("%d\n" % start)
    return start
    

def fsck_tree(path, restart=False):
    annex_root = find_annex_root(path)
    os.chdir(annex_root)
    fsck_start_time = get_or_set_last_fsck_start(annex_root, restart=restart)
    file_list = get_all_files(path)
    files_checked = 0
    for f in file_list:
        fsck_time = get_fsck_time(f)
        if fsck_time < fsck_start_time:
            #print "%s last fscked %s" % (f['short'], fsck_time and time.ctime(fsck_time) or "Never")
            files_checked +=1
            if fsck(f):
                record_fsck(f)

    return files_checked

if __name__ == "__main__":
    roots = sys.argv[1:]
    roots = map(os.path.abspath, roots)
    roots = map(os.path.realpath, roots)

    for root in roots:
        checked = fsck_tree(root)
        print "fscked %d files" % checked
        #if checked == 0:
        #    fsck_tree(root, restart=True)
